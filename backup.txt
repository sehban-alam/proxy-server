// src/index.js
var SITEURL = "whydonate.work";
var WP_HOST = "wp.whydonate.in";
var langs = /* @__PURE__ */ new Set([
  "/nl",
  "/be",
  "/de",
  "/fr",
  "/es",
  "/en",
  "/ro",
  "/pt",
  "/pl",
  "/it",
  "/hu",
  "/el",
  "/hr",
  "/bg",
  "/fi",
  "/cs",
  "/da",
  "/sk",
  "/sv",
  "/uk"
]);
var pathsToRedirect = /* @__PURE__ */ new Set([
  "/account",
  "/fundraising",
  "/donate",
  "/search",
  "/user",
  "/dashboard",
  "/profile",
  "/my-fundraisers",
  "/custom-branding",
  "/organisation",
  "/donations",
  "/custom-domain"
]);
async function handleRequest(request, env) {
  let url = new URL(request.url);
  if (url.hostname === `www.` + SITEURL) {
    url.hostname = SITEURL;
    return Response.redirect(url.toString(), 301);
  }
  if (url.hostname !== SITEURL) {
    if (url.pathname.includes(".js") || url.pathname.includes(".css")) {
      const response = await fetch(`https://whydonate.work${url.pathname}`, request);
      return response;
    }
    if (langs.has(url.pathname) && url.pathname.endsWith("") || langs.has(url.pathname.substring(0, 3)) && url.pathname.length <= 4) {
      return await fetch(`https://whydonate.work${url.pathname}`, request);
    }
    const pathParts2 = url.pathname.split("/");
    const lang2 = "/" + pathParts2[1];
    let path2 = "/" + pathParts2[2];
    if (langs.has(lang2) && pathsToRedirect.has(path2)) {
      return await fetch(`https://whydonate.work${url.pathname}`, request);
    }
    path2 = "/" + pathParts2[1];
    if (pathsToRedirect.has(path2)) {
      return await fetch(`https://whydonate.work/en${url.pathname}`, request);
    }
    const resp = await fetch(`https://whydonate.work/en/`, request);
    return resp;
  }
  if (!url.pathname.includes("wp") && (url.pathname.includes(".js") || url.pathname.includes(".css"))) {
    return await fetch(request);
  }
  if (url.pathname.includes("wp")) {
    return handleBlog(request);
  }
  if (url.pathname === "/" || langs.has(url.pathname) && url.pathname.endsWith("") || langs.has(url.pathname.substring(0, 3)) && url.pathname.length <= 4) {
    return await fetch(request);
  }
  if (url.searchParams.get("wpml-app") === "ate-widget" || url.searchParams.has("s")) {
    return handleBlog(request);
  }
  const pathParts = url.pathname.split("/");
  const lang = "/" + pathParts[1];
  let path = "/" + pathParts[2];
  if (langs.has(lang) && pathsToRedirect.has(path)) {
    return await fetch(request);
  }
  path = "/" + pathParts[1];
  if (pathsToRedirect.has(path)) {
    return await fetch(request);
  }
  return handleBlog(request);
}
async function handleBlog(request) {
  let url = new URL(request.url);
  let reqHost = url.hostname;
  url.hostname = WP_HOST;
  let response = await fetch(url.toString(), request);
  response = new Response(response.body, response);
  const location = response.headers.get("location");
  if (location != null) {
    response.headers.set("location", location.replace("https://" + SITEURL, "https://" + reqHost));
    response.headers.set("location", location.replace("https://" + WP_HOST, "https://" + reqHost));
  }
  let cookies = response.headers.getAll("set-cookie");
  response.headers.delete("set-cookie");
  for (const cookie of cookies) {
    response.headers.append("set-cookie", cookie.replace("domain=" + WP_HOST, "domain=" + reqHost));
  }
  const rewriter = new HTMLRewriter().on("a", new AttributeRewriter("ref", WP_HOST, reqHost)).on("img", new AttributeRewriter("src", WP_HOST, reqHost)).on("link", new AttributeRewriter("href", WP_HOST, reqHost)).on("meta", new AttributeRewriter("content", WP_HOST, reqHost)).on("script", new AttributeRewriter("src", WP_HOST, reqHost)).on("form", new AttributeRewriter("action", WP_HOST, reqHost));
  const contentType = response.headers.get("Content-Type");
  if (contentType?.startsWith("text/html")) {
    return rewriter.transform(response);
  } else {
    return response;
  }
}
var AttributeRewriter = class {
  constructor(attributeName, oldStr, newStr) {
    this.attributeName = attributeName;
    this.oldStr = oldStr;
    this.newStr = newStr;
  }
  element(element) {
    const attribute = element.getAttribute(this.attributeName);
    if (attribute) {
      element.setAttribute(
        this.attributeName,
        attribute.replace(this.oldStr, this.newStr)
      );
    }
  }
};
var src_default = {
  async fetch(request, env, ctx) {
    return handleRequest(request, env);
  }
};
export {
  src_default as default
};
//# sourceMappingURL=index.js.map
